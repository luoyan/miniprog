/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.miui.ad.thrift.model;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MiuiAdQueryServiceLogAlgorithmExposeDetail implements TBase<MiuiAdQueryServiceLogAlgorithmExposeDetail, MiuiAdQueryServiceLogAlgorithmExposeDetail._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MiuiAdQueryServiceLogAlgorithmExposeDetail");

  private static final TField SCRIBE_INFO_FIELD_DESC = new TField("scribeInfo", TType.STRUCT, (short)1);
  private static final TField LOG_TYPE_FIELD_DESC = new TField("logType", TType.STRING, (short)2);
  private static final TField CLIENT_INFO_FIELD_DESC = new TField("clientInfo", TType.STRUCT, (short)3);
  private static final TField ALGORITHM_NAME_FIELD_DESC = new TField("algorithmName", TType.STRING, (short)4);
  private static final TField EXPERIMENT_FIELD_DESC = new TField("experiment", TType.STRING, (short)5);
  private static final TField PACKAGE_NAME_LIST_FIELD_DESC = new TField("packageNameList", TType.LIST, (short)6);

  private MiuiAdQueryServiceLogScribeInfo scribeInfo;
  private String logType;
  private ClientInfo clientInfo;
  private String algorithmName;
  private String experiment;
  private List<String> packageNameList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SCRIBE_INFO((short)1, "scribeInfo"),
    LOG_TYPE((short)2, "logType"),
    CLIENT_INFO((short)3, "clientInfo"),
    ALGORITHM_NAME((short)4, "algorithmName"),
    EXPERIMENT((short)5, "experiment"),
    PACKAGE_NAME_LIST((short)6, "packageNameList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCRIBE_INFO
          return SCRIBE_INFO;
        case 2: // LOG_TYPE
          return LOG_TYPE;
        case 3: // CLIENT_INFO
          return CLIENT_INFO;
        case 4: // ALGORITHM_NAME
          return ALGORITHM_NAME;
        case 5: // EXPERIMENT
          return EXPERIMENT;
        case 6: // PACKAGE_NAME_LIST
          return PACKAGE_NAME_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCRIBE_INFO, new FieldMetaData("scribeInfo", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MiuiAdQueryServiceLogScribeInfo.class)));
    tmpMap.put(_Fields.LOG_TYPE, new FieldMetaData("logType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLIENT_INFO, new FieldMetaData("clientInfo", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ClientInfo.class)));
    tmpMap.put(_Fields.ALGORITHM_NAME, new FieldMetaData("algorithmName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.EXPERIMENT, new FieldMetaData("experiment", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_NAME_LIST, new FieldMetaData("packageNameList", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MiuiAdQueryServiceLogAlgorithmExposeDetail.class, metaDataMap);
  }

  public MiuiAdQueryServiceLogAlgorithmExposeDetail() {
  }

  public MiuiAdQueryServiceLogAlgorithmExposeDetail(
    MiuiAdQueryServiceLogScribeInfo scribeInfo,
    String logType,
    ClientInfo clientInfo,
    String algorithmName,
    String experiment,
    List<String> packageNameList)
  {
    this();
    this.scribeInfo = scribeInfo;
    this.logType = logType;
    this.clientInfo = clientInfo;
    this.algorithmName = algorithmName;
    this.experiment = experiment;
    this.packageNameList = packageNameList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MiuiAdQueryServiceLogAlgorithmExposeDetail(MiuiAdQueryServiceLogAlgorithmExposeDetail other) {
    if (other.isSetScribeInfo()) {
      this.scribeInfo = new MiuiAdQueryServiceLogScribeInfo(other.scribeInfo);
    }
    if (other.isSetLogType()) {
      this.logType = other.logType;
    }
    if (other.isSetClientInfo()) {
      this.clientInfo = new ClientInfo(other.clientInfo);
    }
    if (other.isSetAlgorithmName()) {
      this.algorithmName = other.algorithmName;
    }
    if (other.isSetExperiment()) {
      this.experiment = other.experiment;
    }
    if (other.isSetPackageNameList()) {
      List<String> __this__packageNameList = new ArrayList<String>();
      for (String other_element : other.packageNameList) {
        __this__packageNameList.add(other_element);
      }
      this.packageNameList = __this__packageNameList;
    }
  }

  public MiuiAdQueryServiceLogAlgorithmExposeDetail deepCopy() {
    return new MiuiAdQueryServiceLogAlgorithmExposeDetail(this);
  }

  @Override
  public void clear() {
    this.scribeInfo = null;
    this.logType = null;
    this.clientInfo = null;
    this.algorithmName = null;
    this.experiment = null;
    this.packageNameList = null;
  }

  public MiuiAdQueryServiceLogScribeInfo getScribeInfo() {
    return this.scribeInfo;
  }

  public void setScribeInfo(MiuiAdQueryServiceLogScribeInfo scribeInfo) {
    this.scribeInfo = scribeInfo;
  }

  public void unsetScribeInfo() {
    this.scribeInfo = null;
  }

  /** Returns true if field scribeInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetScribeInfo() {
    return this.scribeInfo != null;
  }

  public void setScribeInfoIsSet(boolean value) {
    if (!value) {
      this.scribeInfo = null;
    }
  }

  public String getLogType() {
    return this.logType;
  }

  public void setLogType(String logType) {
    this.logType = logType;
  }

  public void unsetLogType() {
    this.logType = null;
  }

  /** Returns true if field logType is set (has been asigned a value) and false otherwise */
  public boolean isSetLogType() {
    return this.logType != null;
  }

  public void setLogTypeIsSet(boolean value) {
    if (!value) {
      this.logType = null;
    }
  }

  public ClientInfo getClientInfo() {
    return this.clientInfo;
  }

  public void setClientInfo(ClientInfo clientInfo) {
    this.clientInfo = clientInfo;
  }

  public void unsetClientInfo() {
    this.clientInfo = null;
  }

  /** Returns true if field clientInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetClientInfo() {
    return this.clientInfo != null;
  }

  public void setClientInfoIsSet(boolean value) {
    if (!value) {
      this.clientInfo = null;
    }
  }

  public String getAlgorithmName() {
    return this.algorithmName;
  }

  public void setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
  }

  public void unsetAlgorithmName() {
    this.algorithmName = null;
  }

  /** Returns true if field algorithmName is set (has been asigned a value) and false otherwise */
  public boolean isSetAlgorithmName() {
    return this.algorithmName != null;
  }

  public void setAlgorithmNameIsSet(boolean value) {
    if (!value) {
      this.algorithmName = null;
    }
  }

  public String getExperiment() {
    return this.experiment;
  }

  public void setExperiment(String experiment) {
    this.experiment = experiment;
  }

  public void unsetExperiment() {
    this.experiment = null;
  }

  /** Returns true if field experiment is set (has been asigned a value) and false otherwise */
  public boolean isSetExperiment() {
    return this.experiment != null;
  }

  public void setExperimentIsSet(boolean value) {
    if (!value) {
      this.experiment = null;
    }
  }

  public int getPackageNameListSize() {
    return (this.packageNameList == null) ? 0 : this.packageNameList.size();
  }

  public java.util.Iterator<String> getPackageNameListIterator() {
    return (this.packageNameList == null) ? null : this.packageNameList.iterator();
  }

  public void addToPackageNameList(String elem) {
    if (this.packageNameList == null) {
      this.packageNameList = new ArrayList<String>();
    }
    this.packageNameList.add(elem);
  }

  public List<String> getPackageNameList() {
    return this.packageNameList;
  }

  public void setPackageNameList(List<String> packageNameList) {
    this.packageNameList = packageNameList;
  }

  public void unsetPackageNameList() {
    this.packageNameList = null;
  }

  /** Returns true if field packageNameList is set (has been asigned a value) and false otherwise */
  public boolean isSetPackageNameList() {
    return this.packageNameList != null;
  }

  public void setPackageNameListIsSet(boolean value) {
    if (!value) {
      this.packageNameList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCRIBE_INFO:
      if (value == null) {
        unsetScribeInfo();
      } else {
        setScribeInfo((MiuiAdQueryServiceLogScribeInfo)value);
      }
      break;

    case LOG_TYPE:
      if (value == null) {
        unsetLogType();
      } else {
        setLogType((String)value);
      }
      break;

    case CLIENT_INFO:
      if (value == null) {
        unsetClientInfo();
      } else {
        setClientInfo((ClientInfo)value);
      }
      break;

    case ALGORITHM_NAME:
      if (value == null) {
        unsetAlgorithmName();
      } else {
        setAlgorithmName((String)value);
      }
      break;

    case EXPERIMENT:
      if (value == null) {
        unsetExperiment();
      } else {
        setExperiment((String)value);
      }
      break;

    case PACKAGE_NAME_LIST:
      if (value == null) {
        unsetPackageNameList();
      } else {
        setPackageNameList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCRIBE_INFO:
      return getScribeInfo();

    case LOG_TYPE:
      return getLogType();

    case CLIENT_INFO:
      return getClientInfo();

    case ALGORITHM_NAME:
      return getAlgorithmName();

    case EXPERIMENT:
      return getExperiment();

    case PACKAGE_NAME_LIST:
      return getPackageNameList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCRIBE_INFO:
      return isSetScribeInfo();
    case LOG_TYPE:
      return isSetLogType();
    case CLIENT_INFO:
      return isSetClientInfo();
    case ALGORITHM_NAME:
      return isSetAlgorithmName();
    case EXPERIMENT:
      return isSetExperiment();
    case PACKAGE_NAME_LIST:
      return isSetPackageNameList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MiuiAdQueryServiceLogAlgorithmExposeDetail)
      return this.equals((MiuiAdQueryServiceLogAlgorithmExposeDetail)that);
    return false;
  }

  public boolean equals(MiuiAdQueryServiceLogAlgorithmExposeDetail that) {
    if (that == null)
      return false;

    boolean this_present_scribeInfo = true && this.isSetScribeInfo();
    boolean that_present_scribeInfo = true && that.isSetScribeInfo();
    if (this_present_scribeInfo || that_present_scribeInfo) {
      if (!(this_present_scribeInfo && that_present_scribeInfo))
        return false;
      if (!this.scribeInfo.equals(that.scribeInfo))
        return false;
    }

    boolean this_present_logType = true && this.isSetLogType();
    boolean that_present_logType = true && that.isSetLogType();
    if (this_present_logType || that_present_logType) {
      if (!(this_present_logType && that_present_logType))
        return false;
      if (!this.logType.equals(that.logType))
        return false;
    }

    boolean this_present_clientInfo = true && this.isSetClientInfo();
    boolean that_present_clientInfo = true && that.isSetClientInfo();
    if (this_present_clientInfo || that_present_clientInfo) {
      if (!(this_present_clientInfo && that_present_clientInfo))
        return false;
      if (!this.clientInfo.equals(that.clientInfo))
        return false;
    }

    boolean this_present_algorithmName = true && this.isSetAlgorithmName();
    boolean that_present_algorithmName = true && that.isSetAlgorithmName();
    if (this_present_algorithmName || that_present_algorithmName) {
      if (!(this_present_algorithmName && that_present_algorithmName))
        return false;
      if (!this.algorithmName.equals(that.algorithmName))
        return false;
    }

    boolean this_present_experiment = true && this.isSetExperiment();
    boolean that_present_experiment = true && that.isSetExperiment();
    if (this_present_experiment || that_present_experiment) {
      if (!(this_present_experiment && that_present_experiment))
        return false;
      if (!this.experiment.equals(that.experiment))
        return false;
    }

    boolean this_present_packageNameList = true && this.isSetPackageNameList();
    boolean that_present_packageNameList = true && that.isSetPackageNameList();
    if (this_present_packageNameList || that_present_packageNameList) {
      if (!(this_present_packageNameList && that_present_packageNameList))
        return false;
      if (!this.packageNameList.equals(that.packageNameList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_scribeInfo = true && (isSetScribeInfo());
    builder.append(present_scribeInfo);
    if (present_scribeInfo)
      builder.append(scribeInfo);

    boolean present_logType = true && (isSetLogType());
    builder.append(present_logType);
    if (present_logType)
      builder.append(logType);

    boolean present_clientInfo = true && (isSetClientInfo());
    builder.append(present_clientInfo);
    if (present_clientInfo)
      builder.append(clientInfo);

    boolean present_algorithmName = true && (isSetAlgorithmName());
    builder.append(present_algorithmName);
    if (present_algorithmName)
      builder.append(algorithmName);

    boolean present_experiment = true && (isSetExperiment());
    builder.append(present_experiment);
    if (present_experiment)
      builder.append(experiment);

    boolean present_packageNameList = true && (isSetPackageNameList());
    builder.append(present_packageNameList);
    if (present_packageNameList)
      builder.append(packageNameList);

    return builder.toHashCode();
  }

  public int compareTo(MiuiAdQueryServiceLogAlgorithmExposeDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MiuiAdQueryServiceLogAlgorithmExposeDetail typedOther = (MiuiAdQueryServiceLogAlgorithmExposeDetail)other;

    lastComparison = Boolean.valueOf(isSetScribeInfo()).compareTo(typedOther.isSetScribeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScribeInfo()) {
      lastComparison = TBaseHelper.compareTo(this.scribeInfo, typedOther.scribeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogType()).compareTo(typedOther.isSetLogType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogType()) {
      lastComparison = TBaseHelper.compareTo(this.logType, typedOther.logType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientInfo()).compareTo(typedOther.isSetClientInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientInfo()) {
      lastComparison = TBaseHelper.compareTo(this.clientInfo, typedOther.clientInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithmName()).compareTo(typedOther.isSetAlgorithmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithmName()) {
      lastComparison = TBaseHelper.compareTo(this.algorithmName, typedOther.algorithmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(typedOther.isSetExperiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperiment()) {
      lastComparison = TBaseHelper.compareTo(this.experiment, typedOther.experiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageNameList()).compareTo(typedOther.isSetPackageNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageNameList()) {
      lastComparison = TBaseHelper.compareTo(this.packageNameList, typedOther.packageNameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SCRIBE_INFO
          if (field.type == TType.STRUCT) {
            this.scribeInfo = new MiuiAdQueryServiceLogScribeInfo();
            this.scribeInfo.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LOG_TYPE
          if (field.type == TType.STRING) {
            this.logType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CLIENT_INFO
          if (field.type == TType.STRUCT) {
            this.clientInfo = new ClientInfo();
            this.clientInfo.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ALGORITHM_NAME
          if (field.type == TType.STRING) {
            this.algorithmName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // EXPERIMENT
          if (field.type == TType.STRING) {
            this.experiment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PACKAGE_NAME_LIST
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.packageNameList = new ArrayList<String>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.packageNameList.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.scribeInfo != null) {
      oprot.writeFieldBegin(SCRIBE_INFO_FIELD_DESC);
      this.scribeInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.logType != null) {
      oprot.writeFieldBegin(LOG_TYPE_FIELD_DESC);
      oprot.writeString(this.logType);
      oprot.writeFieldEnd();
    }
    if (this.clientInfo != null) {
      oprot.writeFieldBegin(CLIENT_INFO_FIELD_DESC);
      this.clientInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.algorithmName != null) {
      oprot.writeFieldBegin(ALGORITHM_NAME_FIELD_DESC);
      oprot.writeString(this.algorithmName);
      oprot.writeFieldEnd();
    }
    if (this.experiment != null) {
      oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
      oprot.writeString(this.experiment);
      oprot.writeFieldEnd();
    }
    if (this.packageNameList != null) {
      oprot.writeFieldBegin(PACKAGE_NAME_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.packageNameList.size()));
        for (String _iter3 : this.packageNameList)
        {
          oprot.writeString(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MiuiAdQueryServiceLogAlgorithmExposeDetail(");
    boolean first = true;

    sb.append("scribeInfo:");
    if (this.scribeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.scribeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logType:");
    if (this.logType == null) {
      sb.append("null");
    } else {
      sb.append(this.logType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientInfo:");
    if (this.clientInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.clientInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("algorithmName:");
    if (this.algorithmName == null) {
      sb.append("null");
    } else {
      sb.append(this.algorithmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experiment:");
    if (this.experiment == null) {
      sb.append("null");
    } else {
      sb.append(this.experiment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageNameList:");
    if (this.packageNameList == null) {
      sb.append("null");
    } else {
      sb.append(this.packageNameList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

