/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.xiaomi.miui.ad.thrift.model;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MiuiAppStoreLogHttpRequest implements TBase<MiuiAppStoreLogHttpRequest, MiuiAppStoreLogHttpRequest._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MiuiAppStoreLogHttpRequest");

  private static final TField SCRIBE_INFO_FIELD_DESC = new TField("scribeInfo", TType.STRUCT, (short)1);
  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)2);
  private static final TField LOG_TYPE_FIELD_DESC = new TField("logType", TType.STRING, (short)3);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)4);
  private static final TField HTTP_PARAMS_FIELD_DESC = new TField("httpParams", TType.MAP, (short)5);
  private static final TField HTTP_METHOD_FIELD_DESC = new TField("httpMethod", TType.STRING, (short)6);
  private static final TField HTTP_METHOD_PATH_FIELD_DESC = new TField("httpMethodPath", TType.STRING, (short)7);
  private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I64, (short)8);
  private static final TField SEARCH_RESULT_BY_JSON_FIELD_DESC = new TField("searchResultByJson", TType.STRING, (short)9);

  private MiuiLogScribeInfo scribeInfo;
  private long timestamp;
  private String logType;
  private String path;
  private Map<String,String> httpParams;
  private String httpMethod;
  private String httpMethodPath;
  private long userId;
  private String searchResultByJson;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SCRIBE_INFO((short)1, "scribeInfo"),
    TIMESTAMP((short)2, "timestamp"),
    LOG_TYPE((short)3, "logType"),
    PATH((short)4, "path"),
    HTTP_PARAMS((short)5, "httpParams"),
    HTTP_METHOD((short)6, "httpMethod"),
    HTTP_METHOD_PATH((short)7, "httpMethodPath"),
    USER_ID((short)8, "userId"),
    SEARCH_RESULT_BY_JSON((short)9, "searchResultByJson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCRIBE_INFO
          return SCRIBE_INFO;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // LOG_TYPE
          return LOG_TYPE;
        case 4: // PATH
          return PATH;
        case 5: // HTTP_PARAMS
          return HTTP_PARAMS;
        case 6: // HTTP_METHOD
          return HTTP_METHOD;
        case 7: // HTTP_METHOD_PATH
          return HTTP_METHOD_PATH;
        case 8: // USER_ID
          return USER_ID;
        case 9: // SEARCH_RESULT_BY_JSON
          return SEARCH_RESULT_BY_JSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCRIBE_INFO, new FieldMetaData("scribeInfo", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MiuiLogScribeInfo.class)));
    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.LOG_TYPE, new FieldMetaData("logType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HTTP_PARAMS, new FieldMetaData("httpParams", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.HTTP_METHOD, new FieldMetaData("httpMethod", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HTTP_METHOD_PATH, new FieldMetaData("httpMethodPath", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SEARCH_RESULT_BY_JSON, new FieldMetaData("searchResultByJson", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MiuiAppStoreLogHttpRequest.class, metaDataMap);
  }

  public MiuiAppStoreLogHttpRequest() {
  }

  public MiuiAppStoreLogHttpRequest(
    MiuiLogScribeInfo scribeInfo,
    long timestamp,
    String logType,
    String path,
    Map<String,String> httpParams,
    String httpMethod,
    String httpMethodPath,
    long userId)
  {
    this();
    this.scribeInfo = scribeInfo;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.logType = logType;
    this.path = path;
    this.httpParams = httpParams;
    this.httpMethod = httpMethod;
    this.httpMethodPath = httpMethodPath;
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MiuiAppStoreLogHttpRequest(MiuiAppStoreLogHttpRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetScribeInfo()) {
      this.scribeInfo = new MiuiLogScribeInfo(other.scribeInfo);
    }
    this.timestamp = other.timestamp;
    if (other.isSetLogType()) {
      this.logType = other.logType;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetHttpParams()) {
      Map<String,String> __this__httpParams = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.httpParams.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__httpParams_copy_key = other_element_key;

        String __this__httpParams_copy_value = other_element_value;

        __this__httpParams.put(__this__httpParams_copy_key, __this__httpParams_copy_value);
      }
      this.httpParams = __this__httpParams;
    }
    if (other.isSetHttpMethod()) {
      this.httpMethod = other.httpMethod;
    }
    if (other.isSetHttpMethodPath()) {
      this.httpMethodPath = other.httpMethodPath;
    }
    this.userId = other.userId;
    if (other.isSetSearchResultByJson()) {
      this.searchResultByJson = other.searchResultByJson;
    }
  }

  public MiuiAppStoreLogHttpRequest deepCopy() {
    return new MiuiAppStoreLogHttpRequest(this);
  }

  @Override
  public void clear() {
    this.scribeInfo = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.logType = null;
    this.path = null;
    this.httpParams = null;
    this.httpMethod = null;
    this.httpMethodPath = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.searchResultByJson = null;
  }

  public MiuiLogScribeInfo getScribeInfo() {
    return this.scribeInfo;
  }

  public void setScribeInfo(MiuiLogScribeInfo scribeInfo) {
    this.scribeInfo = scribeInfo;
  }

  public void unsetScribeInfo() {
    this.scribeInfo = null;
  }

  /** Returns true if field scribeInfo is set (has been asigned a value) and false otherwise */
  public boolean isSetScribeInfo() {
    return this.scribeInfo != null;
  }

  public void setScribeInfoIsSet(boolean value) {
    if (!value) {
      this.scribeInfo = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getLogType() {
    return this.logType;
  }

  public void setLogType(String logType) {
    this.logType = logType;
  }

  public void unsetLogType() {
    this.logType = null;
  }

  /** Returns true if field logType is set (has been asigned a value) and false otherwise */
  public boolean isSetLogType() {
    return this.logType != null;
  }

  public void setLogTypeIsSet(boolean value) {
    if (!value) {
      this.logType = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been asigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public int getHttpParamsSize() {
    return (this.httpParams == null) ? 0 : this.httpParams.size();
  }

  public void putToHttpParams(String key, String val) {
    if (this.httpParams == null) {
      this.httpParams = new HashMap<String,String>();
    }
    this.httpParams.put(key, val);
  }

  public Map<String,String> getHttpParams() {
    return this.httpParams;
  }

  public void setHttpParams(Map<String,String> httpParams) {
    this.httpParams = httpParams;
  }

  public void unsetHttpParams() {
    this.httpParams = null;
  }

  /** Returns true if field httpParams is set (has been asigned a value) and false otherwise */
  public boolean isSetHttpParams() {
    return this.httpParams != null;
  }

  public void setHttpParamsIsSet(boolean value) {
    if (!value) {
      this.httpParams = null;
    }
  }

  public String getHttpMethod() {
    return this.httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }

  public void unsetHttpMethod() {
    this.httpMethod = null;
  }

  /** Returns true if field httpMethod is set (has been asigned a value) and false otherwise */
  public boolean isSetHttpMethod() {
    return this.httpMethod != null;
  }

  public void setHttpMethodIsSet(boolean value) {
    if (!value) {
      this.httpMethod = null;
    }
  }

  public String getHttpMethodPath() {
    return this.httpMethodPath;
  }

  public void setHttpMethodPath(String httpMethodPath) {
    this.httpMethodPath = httpMethodPath;
  }

  public void unsetHttpMethodPath() {
    this.httpMethodPath = null;
  }

  /** Returns true if field httpMethodPath is set (has been asigned a value) and false otherwise */
  public boolean isSetHttpMethodPath() {
    return this.httpMethodPath != null;
  }

  public void setHttpMethodPathIsSet(boolean value) {
    if (!value) {
      this.httpMethodPath = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public void setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been asigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getSearchResultByJson() {
    return this.searchResultByJson;
  }

  public void setSearchResultByJson(String searchResultByJson) {
    this.searchResultByJson = searchResultByJson;
  }

  public void unsetSearchResultByJson() {
    this.searchResultByJson = null;
  }

  /** Returns true if field searchResultByJson is set (has been asigned a value) and false otherwise */
  public boolean isSetSearchResultByJson() {
    return this.searchResultByJson != null;
  }

  public void setSearchResultByJsonIsSet(boolean value) {
    if (!value) {
      this.searchResultByJson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCRIBE_INFO:
      if (value == null) {
        unsetScribeInfo();
      } else {
        setScribeInfo((MiuiLogScribeInfo)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case LOG_TYPE:
      if (value == null) {
        unsetLogType();
      } else {
        setLogType((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case HTTP_PARAMS:
      if (value == null) {
        unsetHttpParams();
      } else {
        setHttpParams((Map<String,String>)value);
      }
      break;

    case HTTP_METHOD:
      if (value == null) {
        unsetHttpMethod();
      } else {
        setHttpMethod((String)value);
      }
      break;

    case HTTP_METHOD_PATH:
      if (value == null) {
        unsetHttpMethodPath();
      } else {
        setHttpMethodPath((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case SEARCH_RESULT_BY_JSON:
      if (value == null) {
        unsetSearchResultByJson();
      } else {
        setSearchResultByJson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCRIBE_INFO:
      return getScribeInfo();

    case TIMESTAMP:
      return new Long(getTimestamp());

    case LOG_TYPE:
      return getLogType();

    case PATH:
      return getPath();

    case HTTP_PARAMS:
      return getHttpParams();

    case HTTP_METHOD:
      return getHttpMethod();

    case HTTP_METHOD_PATH:
      return getHttpMethodPath();

    case USER_ID:
      return new Long(getUserId());

    case SEARCH_RESULT_BY_JSON:
      return getSearchResultByJson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCRIBE_INFO:
      return isSetScribeInfo();
    case TIMESTAMP:
      return isSetTimestamp();
    case LOG_TYPE:
      return isSetLogType();
    case PATH:
      return isSetPath();
    case HTTP_PARAMS:
      return isSetHttpParams();
    case HTTP_METHOD:
      return isSetHttpMethod();
    case HTTP_METHOD_PATH:
      return isSetHttpMethodPath();
    case USER_ID:
      return isSetUserId();
    case SEARCH_RESULT_BY_JSON:
      return isSetSearchResultByJson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MiuiAppStoreLogHttpRequest)
      return this.equals((MiuiAppStoreLogHttpRequest)that);
    return false;
  }

  public boolean equals(MiuiAppStoreLogHttpRequest that) {
    if (that == null)
      return false;

    boolean this_present_scribeInfo = true && this.isSetScribeInfo();
    boolean that_present_scribeInfo = true && that.isSetScribeInfo();
    if (this_present_scribeInfo || that_present_scribeInfo) {
      if (!(this_present_scribeInfo && that_present_scribeInfo))
        return false;
      if (!this.scribeInfo.equals(that.scribeInfo))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_logType = true && this.isSetLogType();
    boolean that_present_logType = true && that.isSetLogType();
    if (this_present_logType || that_present_logType) {
      if (!(this_present_logType && that_present_logType))
        return false;
      if (!this.logType.equals(that.logType))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_httpParams = true && this.isSetHttpParams();
    boolean that_present_httpParams = true && that.isSetHttpParams();
    if (this_present_httpParams || that_present_httpParams) {
      if (!(this_present_httpParams && that_present_httpParams))
        return false;
      if (!this.httpParams.equals(that.httpParams))
        return false;
    }

    boolean this_present_httpMethod = true && this.isSetHttpMethod();
    boolean that_present_httpMethod = true && that.isSetHttpMethod();
    if (this_present_httpMethod || that_present_httpMethod) {
      if (!(this_present_httpMethod && that_present_httpMethod))
        return false;
      if (!this.httpMethod.equals(that.httpMethod))
        return false;
    }

    boolean this_present_httpMethodPath = true && this.isSetHttpMethodPath();
    boolean that_present_httpMethodPath = true && that.isSetHttpMethodPath();
    if (this_present_httpMethodPath || that_present_httpMethodPath) {
      if (!(this_present_httpMethodPath && that_present_httpMethodPath))
        return false;
      if (!this.httpMethodPath.equals(that.httpMethodPath))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_searchResultByJson = true && this.isSetSearchResultByJson();
    boolean that_present_searchResultByJson = true && that.isSetSearchResultByJson();
    if (this_present_searchResultByJson || that_present_searchResultByJson) {
      if (!(this_present_searchResultByJson && that_present_searchResultByJson))
        return false;
      if (!this.searchResultByJson.equals(that.searchResultByJson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_scribeInfo = true && (isSetScribeInfo());
    builder.append(present_scribeInfo);
    if (present_scribeInfo)
      builder.append(scribeInfo);

    boolean present_timestamp = true;
    builder.append(present_timestamp);
    if (present_timestamp)
      builder.append(timestamp);

    boolean present_logType = true && (isSetLogType());
    builder.append(present_logType);
    if (present_logType)
      builder.append(logType);

    boolean present_path = true && (isSetPath());
    builder.append(present_path);
    if (present_path)
      builder.append(path);

    boolean present_httpParams = true && (isSetHttpParams());
    builder.append(present_httpParams);
    if (present_httpParams)
      builder.append(httpParams);

    boolean present_httpMethod = true && (isSetHttpMethod());
    builder.append(present_httpMethod);
    if (present_httpMethod)
      builder.append(httpMethod);

    boolean present_httpMethodPath = true && (isSetHttpMethodPath());
    builder.append(present_httpMethodPath);
    if (present_httpMethodPath)
      builder.append(httpMethodPath);

    boolean present_userId = true;
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_searchResultByJson = true && (isSetSearchResultByJson());
    builder.append(present_searchResultByJson);
    if (present_searchResultByJson)
      builder.append(searchResultByJson);

    return builder.toHashCode();
  }

  public int compareTo(MiuiAppStoreLogHttpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MiuiAppStoreLogHttpRequest typedOther = (MiuiAppStoreLogHttpRequest)other;

    lastComparison = Boolean.valueOf(isSetScribeInfo()).compareTo(typedOther.isSetScribeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScribeInfo()) {
      lastComparison = TBaseHelper.compareTo(this.scribeInfo, typedOther.scribeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogType()).compareTo(typedOther.isSetLogType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogType()) {
      lastComparison = TBaseHelper.compareTo(this.logType, typedOther.logType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpParams()).compareTo(typedOther.isSetHttpParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpParams()) {
      lastComparison = TBaseHelper.compareTo(this.httpParams, typedOther.httpParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpMethod()).compareTo(typedOther.isSetHttpMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpMethod()) {
      lastComparison = TBaseHelper.compareTo(this.httpMethod, typedOther.httpMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpMethodPath()).compareTo(typedOther.isSetHttpMethodPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpMethodPath()) {
      lastComparison = TBaseHelper.compareTo(this.httpMethodPath, typedOther.httpMethodPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchResultByJson()).compareTo(typedOther.isSetSearchResultByJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchResultByJson()) {
      lastComparison = TBaseHelper.compareTo(this.searchResultByJson, typedOther.searchResultByJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SCRIBE_INFO
          if (field.type == TType.STRUCT) {
            this.scribeInfo = new MiuiLogScribeInfo();
            this.scribeInfo.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TIMESTAMP
          if (field.type == TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LOG_TYPE
          if (field.type == TType.STRING) {
            this.logType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PATH
          if (field.type == TType.STRING) {
            this.path = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // HTTP_PARAMS
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.httpParams = new HashMap<String,String>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                String _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readString();
                this.httpParams.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // HTTP_METHOD
          if (field.type == TType.STRING) {
            this.httpMethod = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // HTTP_METHOD_PATH
          if (field.type == TType.STRING) {
            this.httpMethodPath = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // USER_ID
          if (field.type == TType.I64) {
            this.userId = iprot.readI64();
            setUserIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // SEARCH_RESULT_BY_JSON
          if (field.type == TType.STRING) {
            this.searchResultByJson = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.scribeInfo != null) {
      oprot.writeFieldBegin(SCRIBE_INFO_FIELD_DESC);
      this.scribeInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    if (this.logType != null) {
      oprot.writeFieldBegin(LOG_TYPE_FIELD_DESC);
      oprot.writeString(this.logType);
      oprot.writeFieldEnd();
    }
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeString(this.path);
      oprot.writeFieldEnd();
    }
    if (this.httpParams != null) {
      oprot.writeFieldBegin(HTTP_PARAMS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.httpParams.size()));
        for (Map.Entry<String, String> _iter4 : this.httpParams.entrySet())
        {
          oprot.writeString(_iter4.getKey());
          oprot.writeString(_iter4.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.httpMethod != null) {
      oprot.writeFieldBegin(HTTP_METHOD_FIELD_DESC);
      oprot.writeString(this.httpMethod);
      oprot.writeFieldEnd();
    }
    if (this.httpMethodPath != null) {
      oprot.writeFieldBegin(HTTP_METHOD_PATH_FIELD_DESC);
      oprot.writeString(this.httpMethodPath);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_ID_FIELD_DESC);
    oprot.writeI64(this.userId);
    oprot.writeFieldEnd();
    if (this.searchResultByJson != null) {
      if (isSetSearchResultByJson()) {
        oprot.writeFieldBegin(SEARCH_RESULT_BY_JSON_FIELD_DESC);
        oprot.writeString(this.searchResultByJson);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MiuiAppStoreLogHttpRequest(");
    boolean first = true;

    sb.append("scribeInfo:");
    if (this.scribeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.scribeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logType:");
    if (this.logType == null) {
      sb.append("null");
    } else {
      sb.append(this.logType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("httpParams:");
    if (this.httpParams == null) {
      sb.append("null");
    } else {
      sb.append(this.httpParams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("httpMethod:");
    if (this.httpMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.httpMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("httpMethodPath:");
    if (this.httpMethodPath == null) {
      sb.append("null");
    } else {
      sb.append(this.httpMethodPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetSearchResultByJson()) {
      if (!first) sb.append(", ");
      sb.append("searchResultByJson:");
      if (this.searchResultByJson == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultByJson);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

